from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

import data_base


def main_menu():
    fourm = InlineKeyboardButton(text="–§–æ—Ä—É–º")
    ask_a_question = InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    answer_the_questions = InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
    my_questions = InlineKeyboardButton(text="–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã")
    my_answers = InlineKeyboardButton(text="–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã")
    rating = InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥")
    main_menu = InlineKeyboardButton(text="–ú–µ–Ω—é")
    menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(ask_a_question, my_questions,
                                                                      answer_the_questions,
                                                                      my_answers,
                                                                      fourm, rating, main_menu)
    return menu


def all_questions_answer(action=None):
    questions = InlineKeyboardMarkup(row_width=2)
    development = InlineKeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="category_—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞_"+action)
    testing = InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="category_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ_"+action)
    analytics = InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="category_–∞–Ω–∞–ª–∏—Ç–∏–∫_"+action)
    administration = InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="category_–∞–¥–º–∏–Ω_"+action)
    information_security = InlineKeyboardButton("–ò–ë", callback_data="category_–∏–±_"+action)
    design = InlineKeyboardButton("–î–∏–∑–∞–π–Ω", callback_data="category_–¥–∏–∑–∞–π–Ω_"+action)
    formulation = InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_"+action)
    questions.add(development, testing,analytics, administration, information_security, design)
    questions.row(formulation)
    return questions


def my_questions():
    questions = InlineKeyboardMarkup(row_width=2)
    under_consideration = InlineKeyboardButton("–ù–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data="questions_no-check")
    resolved = InlineKeyboardButton("–†–µ—à–µ–Ω–Ω—ã–µ", callback_data="questions_check")
    questions.add(under_consideration, resolved)
    return questions


def user_questions(chat_id_applicant=None, status=None, action=None):
    questions = InlineKeyboardMarkup(row_width=2)
    cancel = InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")
    message = data_base.Message.query.filter_by(chat_id_applicant=chat_id_applicant, status=status).with_entities(data_base.Message.message_question).all()
    message_id = data_base.Message.query.filter_by(chat_id_applicant=chat_id_applicant, status=status).with_entities(data_base.Message.id).all()
    message_title = data_base.Message.query.filter_by(chat_id_applicant=chat_id_applicant, status=status).with_entities(data_base.Message.title).all()
    for i in range(len(message)):
        questions.add(InlineKeyboardButton(message_title[i][0], callback_data=f"questions_{message_title[i][0]}_{message_id[i][0]}_{action}"))
    questions.add(cancel)
    return questions


def user_answer(chat_id_respondent=None, status=None, action=None):
    questions = InlineKeyboardMarkup(row_width=2)
    message = data_base.Message.query.filter_by(chat_id_respondent=chat_id_respondent, status=status).with_entities(data_base.Message.message_question).all()
    message_id = data_base.Message.query.filter_by(chat_id_respondent=chat_id_respondent, status=status).with_entities(data_base.Message.id).all()
    message_title = data_base.Message.query.filter_by(chat_id_respondent=chat_id_respondent, status=status).with_entities(data_base.Message.title).all()
    for i in range(len(message)):
        questions.add(InlineKeyboardButton(message_title[i][0], callback_data=f"answer_{message_title[i][0]}_{message_id[i][0]}_{action}"))
    return questions


def user_all_questions(category, status, point):
    questions = InlineKeyboardMarkup(row_width=2)
    message = data_base.Message.query.filter_by(category=category, status=status).with_entities(
        data_base.Message.message_question).all()
    message_id = data_base.Message.query.filter_by(category=category, status=status).with_entities(
        data_base.Message.id).all()
    message_title = data_base.Message.query.filter_by(category=category, status=status).with_entities(
        data_base.Message.title).all()
    for i in range(len(message)):
        questions.add(InlineKeyboardButton(message_title[i][0],
                                           callback_data=f"{point}_{category}_{message_title[i][0]}_{message_id[i][0]}"))
    return questions


def delete_message(id, point=None):
    message = InlineKeyboardMarkup(row_width=1)
    if point is not None:
        back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=point)
        message.add(back)
    delete = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="message_delete_"+id)
    message.add(delete)
    return message


def answer_on_message(title, id):
    msg = InlineKeyboardMarkup(row_width=3)
    answer = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"message_answ_{title}_{id}")
    complaint = InlineKeyboardButton("–ñ–∞–ª–æ–±–∞", callback_data=f"message_complaint_{title}_{id}")
    msg.row(answer, complaint)
    return msg


def message_menu(point, message_id=None, like=None, dislike=None, category=None):
    menu = InlineKeyboardMarkup(row_width=1)
    if category is not None:
        back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{point}_{category}")
    else:
        back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=point)
    if like is not None or dislike:
        like = InlineKeyboardButton(f"üëç {like}", callback_data=f"message_like_{message_id}")
        dislike = InlineKeyboardButton(f"üëé {dislike}", callback_data=f"message_dislike_{message_id}")
        menu.row(like, dislike)
    menu.add(back)
    return menu